<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序主流框架汇总</title>
      <link href="/2020/09/23/wei-xin-xiao-cheng-xu-zhu-liu-kuang-jia-hui-zong/"/>
      <url>/2020/09/23/wei-xin-xiao-cheng-xu-zhu-liu-kuang-jia-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序主流框架汇总"><a href="#微信小程序主流框架汇总" class="headerlink" title="微信小程序主流框架汇总"></a>微信小程序主流框架汇总</h1><h2 id="一、uni-app"><a href="#一、uni-app" class="headerlink" title="一、uni-app"></a>一、uni-app</h2><p><a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/dcloudio/uni-app" target="_blank" rel="noopener">github</a><br>uni-app 是一个使用 Vue.js 开发小程序、H5、App的统一前端框架。<br>开发者使用 Vue 语法编写代码，uni-app 框架将其编译到 小程序（微信/支付宝/百度/字节跳动/QQ/钉钉）、App（iOS/Android）、H5等多个平台，保证其正确运行并达到优秀体验。</p><p>特性：</p><ul><li>开发者和案例更多：HBuilder装机量500万台，开发者社区月活百万，70多个QQ微信</li><li>群承载10万人。案例众多，uni统计月活10亿</li><li>性能更高（见评测）</li><li>更丰富的周边生态，插件市场数千款插件</li><li>提供比小程序原生开发更好的开发体验、更高的工程化效率</li><li>跨端抹平度更完善，且各端特色发挥更灵活，可真正实现一套代码多端覆盖，无需各端多头维护升级</li><li>权威认可：阿里小程序官方工具内置uni-app、腾讯课堂官方自制uni-app培训视频</li></ul><p>GitHub：<br><img src="uni-app.png" alt></p><h2 id="二、wepy"><a href="#二、wepy" class="headerlink" title="二、wepy"></a>二、wepy</h2><p><a href="https://wepyjs.github.io/wepy-docs/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/Tencent/wepy" target="_blank" rel="noopener">github</a><br><a href="https://github.com/aben1188/awesome-wepy" target="_blank" rel="noopener">wepy框架开发资源汇总</a><br>WePY (发音: /‘wepi/)是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。框架的细节优化，Promise，Async Functions 的引入都是为了能让开发小程序项目变得更加简单，高效。</p><p>同时 WePY 也是一款成长中的框架，大量吸收借鉴了一些优化前端工具以及框架的设计理念和思想。如果 WePY 有不足地方，或者你有更好的想法，欢迎提交 ISSUE 或者 PR。</p><p>特性：</p><ul><li>类 Vue 开发风格</li><li>支持自定义组件开发</li><li>支持引入 NPM 包</li><li>支持 Promise</li><li>支持 ES2015+ 特性，如 Async Functions</li><li>支持多种编译器，Less/Sass/Stylus/PostCSS、Babel/Typescript、Pug</li><li>支持多种插件处理，文件压缩，图片压缩，内容替换等</li><li>支持 Sourcemap，ESLint 等</li><li>小程序细节优化，如请求列队，事件优化等</li></ul><p>GitHub：<br><img src="wepy.png" alt></p><h2 id="三、mpvue"><a href="#三、mpvue" class="headerlink" title="三、mpvue"></a>三、mpvue</h2><p><a href="http://mpvue.com/mpvue/#-html" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">github</a><br>(我感觉是最像vue的框架)<br>美团团队开源的一款使用 Vue.js 开发微信小程序的前端框架。使用此框架，开发者将得到完整的 Vue.js 开发体验，同时为 H5 和小程序提供了代码复用的能力。</p><p>特性：</p><ul><li>彻底的组件化开发能力：提高代码复用性</li><li>完整的 Vue.js 开发体验</li><li>方便的 Vuex 数据管理方案：方便构建复杂应用</li><li>快捷的 webpack 构建机制：自定义构建策略、开发阶段 hotReload</li><li>支持使用 npm 外部依赖</li><li>使用 Vue.js 命令行工具 vue-cli 快速初始化项目</li><li>H5 代码转换编译成小程序目标代码的能力</li></ul><p>GitHub：<br><img src="mpvue.png" alt></p><h2 id="四、taro"><a href="#四、taro" class="headerlink" title="四、taro"></a>四、taro</h2><p><a href="https://taro.aotu.io/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/NervJS/taro" target="_blank" rel="noopener">github</a><br>京东凹凸实验室开源的一款使用 React.js 开发微信小程序的前端框架。它采用与 React 一致的组件化思想，组件生命周期与 React 保持一致，同时支持使用 JSX 语法，让代码具有更丰富的表现力，使用 Taro 进行开发可以获得和 React 一致的开发体验。,同时因为使用了react的原因所以除了能编译h5, 小程序外还可以编译为ReactNative;<br>Taro 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/ QQ 小程序/H5 等应用。</p><p>特性：</p><ul><li>框架支持<ol><li>React/Nerv 支持, 在 Taro 3 中可以使用完整的 React/Nerv 开发体验</li><li>Vue 支持, 在 Taro 3 中可以使用完整的 Vue 开发体验</li></ol></li><li>多端转换支持。 Taro 方案的初心就是为了打造一个多端开发的解决方案。目前 Taro 3 可以支持转换到 微信/京东/百度/支付宝/字节跳动/QQ 小程序 以及 H5 端</li></ul><p>GitHub：<br><img src="taro.png" alt></p><h2 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h2><p>主要推荐使用前面几种，后面的用的不多，GitHub上star数赶不上前面的零头。。。<br>redux、 megalo、 kbone、 mpx ···</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 主流框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2020/09/22/markdown-ji-ben-yu-fa/"/>
      <url>/2020/09/22/markdown-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><p> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，在2004由约翰·格鲁伯（英语：JohnGruber）创建。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>优点：</p><ol><li>操作简单（语法简单，几分钟就能学会）</li><li>Markdown 被广泛使用来撰写电子书，如：Gitbook。</li><li>被用来来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit等。</li></ol><p>正是Markdown的快速高效，我选择了它（我使用的文本编辑器是sublime）<br>注：本文转载自：<a href="https://www.jianshu.com/p/191d1e21f7ed/" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed/</a> ，正是通过此文我学会Markdown基本语法，为练手特意仿原作者的博客自己做一遍，内容上加了转义字符和自己遇到的一些问题。</p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字</p><p>示例：</p><pre><code>## 示例二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><p>效果如下：</p><h2 id="示例二级标题"><a href="#示例二级标题" class="headerlink" title="示例二级标题"></a>示例二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><strong>加粗</strong><br>要加粗的文字左右分别用两个*号包起来</li><li><strong>斜体</strong><br>要倾斜的文字左右分别用一个*号包起来</li><li><strong>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</li><li><strong>删除线</strong><br>要加删除线的文字左右分别用两个~~号包起来</li></ul><p>示例：</p><pre><code>**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><hr><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没什么用</p><p>示例：</p><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的-或*都可以</p><p>示例：</p><pre><code>-------********</code></pre><p>效果如下：<br>可以看到，显示效果都是一样的,不过不知道为何”—“需要换行才能显示4行，不然只有3行</p><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><pre><code>![PShawn logo](pshawn.png)</code></pre><p>效果如下：</p><p><img src="pshawn.png" alt="PShawn logo"></p><p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。<br>关于图床的选择原作者写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。<a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">markdown图床</a></p><hr><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><pre><code>[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加</code></pre><p>示例：</p><pre><code>[GitHub](https://github.com/)[百度](http://baidu.com)</code></pre><p>效果如下：</p><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><pre><code>&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</code></pre><hr><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><p><strong>无序列表</strong><br>语法：<br>无序列表用 - + * 任何一种都可以</p><pre><code>- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格</code></pre><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p><strong>有序列表</strong><br>语法：<br>数字加点</p><pre><code>1. 列表内容2. 列表内容3. 列表内容</code></pre><p>注意：序号跟内容之间要有空格<br>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p><strong>列表嵌套<br>上一级和下一级之间敲三个空格即可</strong></p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ul><ul><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li><p>一级有序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ol><ol start="2"><li><p>一级有序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><p>注：无序列表下似乎只能无序？</p><hr><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><pre><code>表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>示例：</p><pre><code>姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟</code></pre><p>效果如下：<br>哭了，博客网站暂不支持这种语法,所以截了个图<br><img src="table.png" alt="列表"></p><hr><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><pre><code>    `代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code>(```)  代码...  代码...  代码...(```)</code></pre><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p><p>示例：</p><p>单行代码</p><pre><code>`create database hero;`</code></pre><p>代码块</p><pre><code>(```)    function fun(){         echo &quot;这是一句非常牛逼的代码&quot;;    }    fun();(```)</code></pre><p>效果如下：</p><p>单行代码<br><code>create database hero;</code></p><p>代码块</p><pre><code>    function fun(){         echo &quot;这是一句非常牛逼的代码&quot;;    }    fun();</code></pre><hr><h2 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h2><pre><code>```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;```</code></pre><p>效果如下：<br>博客网站不支持流程图，所以不得已再次截了个图<br><img src="fg.png" alt="流程图"></p><hr><h2 id="十一、转义字符"><a href="#十一、转义字符" class="headerlink" title="十一、转义字符"></a>十一、转义字符</h2><p>在使用 markdown 编辑器编写文档的时候，有时候需要输入一些特殊符号，然而却是 markdown 的语法，那就需要使用转义字符。只需要再特殊符号前加上反斜杠 \ 即可</p><p>示例：</p><pre><code>\\\*\_\{\}\[\]\(\)\#\+\-\.\!</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 基础语法 </tag>
            
            <tag> 博客基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客简单指令</title>
      <link href="/2020/09/22/hexo-ge-ren-bo-ke-jian-dan-zhi-ling/"/>
      <url>/2020/09/22/hexo-ge-ren-bo-ke-jian-dan-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo个人博客简单指令"><a href="#hexo个人博客简单指令" class="headerlink" title="hexo个人博客简单指令"></a>hexo个人博客简单指令</h1><p>hexo s             //启动（在本地运行，Ctrl+C停止）<br>hexo n “blog name” //写文章（生成文章后，用编辑器写作）<br>hexo clean         //清理<br>hexo g             //生成文章<br>hexo s             //再启动一次<br>hexo d             //部署到远端</p><p>按顺序执行即可</p>]]></content>
      
      
      <categories>
          
          <category> -hexo简单指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
